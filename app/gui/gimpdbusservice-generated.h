/*
 * Generated by gdbus-codegen 2.57.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __GIMPDBUSSERVICE_GENERATED_H__
#define __GIMPDBUSSERVICE_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gimp.GIMP.UI */

#define GIMP_DBUS_SERVICE_TYPE_UI (gimp_dbus_service_ui_get_type ())
#define GIMP_DBUS_SERVICE_UI(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GIMP_DBUS_SERVICE_TYPE_UI, GimpDBusServiceUI))
#define GIMP_DBUS_SERVICE_IS_UI(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GIMP_DBUS_SERVICE_TYPE_UI))
#define GIMP_DBUS_SERVICE_UI_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GIMP_DBUS_SERVICE_TYPE_UI, GimpDBusServiceUIIface))

struct _GimpDBusServiceUI;
typedef struct _GimpDBusServiceUI GimpDBusServiceUI;
typedef struct _GimpDBusServiceUIIface GimpDBusServiceUIIface;

struct _GimpDBusServiceUIIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_activate) (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_batch_run) (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interpreter,
    const gchar *arg_command);

  gboolean (*handle_open) (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri);

  gboolean (*handle_open_as_new) (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uri);

  void (*opened) (
    GimpDBusServiceUI *object,
    const gchar *arg_uri);

};

GType gimp_dbus_service_ui_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gimp_dbus_service_ui_interface_info (void);
guint gimp_dbus_service_ui_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gimp_dbus_service_ui_complete_open (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gimp_dbus_service_ui_complete_open_as_new (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gimp_dbus_service_ui_complete_batch_run (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation,
    gboolean success);

void gimp_dbus_service_ui_complete_activate (
    GimpDBusServiceUI *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gimp_dbus_service_ui_emit_opened (
    GimpDBusServiceUI *object,
    const gchar *arg_uri);



/* D-Bus method calls: */
void gimp_dbus_service_ui_call_open (
    GimpDBusServiceUI *proxy,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gimp_dbus_service_ui_call_open_finish (
    GimpDBusServiceUI *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gimp_dbus_service_ui_call_open_sync (
    GimpDBusServiceUI *proxy,
    const gchar *arg_uri,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gimp_dbus_service_ui_call_open_as_new (
    GimpDBusServiceUI *proxy,
    const gchar *arg_uri,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gimp_dbus_service_ui_call_open_as_new_finish (
    GimpDBusServiceUI *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gimp_dbus_service_ui_call_open_as_new_sync (
    GimpDBusServiceUI *proxy,
    const gchar *arg_uri,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gimp_dbus_service_ui_call_batch_run (
    GimpDBusServiceUI *proxy,
    const gchar *arg_interpreter,
    const gchar *arg_command,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gimp_dbus_service_ui_call_batch_run_finish (
    GimpDBusServiceUI *proxy,
    gboolean *out_success,
    GAsyncResult *res,
    GError **error);

gboolean gimp_dbus_service_ui_call_batch_run_sync (
    GimpDBusServiceUI *proxy,
    const gchar *arg_interpreter,
    const gchar *arg_command,
    gboolean *out_success,
    GCancellable *cancellable,
    GError **error);

void gimp_dbus_service_ui_call_activate (
    GimpDBusServiceUI *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gimp_dbus_service_ui_call_activate_finish (
    GimpDBusServiceUI *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gimp_dbus_service_ui_call_activate_sync (
    GimpDBusServiceUI *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GIMP_DBUS_SERVICE_TYPE_UI_PROXY (gimp_dbus_service_ui_proxy_get_type ())
#define GIMP_DBUS_SERVICE_UI_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GIMP_DBUS_SERVICE_TYPE_UI_PROXY, GimpDBusServiceUIProxy))
#define GIMP_DBUS_SERVICE_UI_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GIMP_DBUS_SERVICE_TYPE_UI_PROXY, GimpDBusServiceUIProxyClass))
#define GIMP_DBUS_SERVICE_UI_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GIMP_DBUS_SERVICE_TYPE_UI_PROXY, GimpDBusServiceUIProxyClass))
#define GIMP_DBUS_SERVICE_IS_UI_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GIMP_DBUS_SERVICE_TYPE_UI_PROXY))
#define GIMP_DBUS_SERVICE_IS_UI_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GIMP_DBUS_SERVICE_TYPE_UI_PROXY))

typedef struct _GimpDBusServiceUIProxy GimpDBusServiceUIProxy;
typedef struct _GimpDBusServiceUIProxyClass GimpDBusServiceUIProxyClass;
typedef struct _GimpDBusServiceUIProxyPrivate GimpDBusServiceUIProxyPrivate;

struct _GimpDBusServiceUIProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GimpDBusServiceUIProxyPrivate *priv;
};

struct _GimpDBusServiceUIProxyClass
{
  GDBusProxyClass parent_class;
};

GType gimp_dbus_service_ui_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GimpDBusServiceUIProxy, g_object_unref)
#endif

void gimp_dbus_service_ui_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GimpDBusServiceUI *gimp_dbus_service_ui_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GimpDBusServiceUI *gimp_dbus_service_ui_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gimp_dbus_service_ui_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GimpDBusServiceUI *gimp_dbus_service_ui_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GimpDBusServiceUI *gimp_dbus_service_ui_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GIMP_DBUS_SERVICE_TYPE_UI_SKELETON (gimp_dbus_service_ui_skeleton_get_type ())
#define GIMP_DBUS_SERVICE_UI_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GIMP_DBUS_SERVICE_TYPE_UI_SKELETON, GimpDBusServiceUISkeleton))
#define GIMP_DBUS_SERVICE_UI_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GIMP_DBUS_SERVICE_TYPE_UI_SKELETON, GimpDBusServiceUISkeletonClass))
#define GIMP_DBUS_SERVICE_UI_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GIMP_DBUS_SERVICE_TYPE_UI_SKELETON, GimpDBusServiceUISkeletonClass))
#define GIMP_DBUS_SERVICE_IS_UI_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GIMP_DBUS_SERVICE_TYPE_UI_SKELETON))
#define GIMP_DBUS_SERVICE_IS_UI_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GIMP_DBUS_SERVICE_TYPE_UI_SKELETON))

typedef struct _GimpDBusServiceUISkeleton GimpDBusServiceUISkeleton;
typedef struct _GimpDBusServiceUISkeletonClass GimpDBusServiceUISkeletonClass;
typedef struct _GimpDBusServiceUISkeletonPrivate GimpDBusServiceUISkeletonPrivate;

struct _GimpDBusServiceUISkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GimpDBusServiceUISkeletonPrivate *priv;
};

struct _GimpDBusServiceUISkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gimp_dbus_service_ui_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GimpDBusServiceUISkeleton, g_object_unref)
#endif

GimpDBusServiceUI *gimp_dbus_service_ui_skeleton_new (void);


G_END_DECLS

#endif /* __GIMPDBUSSERVICE_GENERATED_H__ */

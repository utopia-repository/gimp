<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="libgimp-gimppaths">
<refmeta>
<refentrytitle role="top_of_page">gimppaths</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGIMP Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>gimppaths</refname>
<refpurpose>Operations related to paths.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="gchar">gchar</link>**             <link linkend="gimp-path-list">gimp_path_list</link>                      (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gint">gint</link> *num_paths);
<link linkend="gint">gint</link>                <link linkend="gimp-path-get-points">gimp_path_get_points</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> *path_closed,
                                                         <link linkend="gint">gint</link> *num_path_point_details,
                                                         <link linkend="gdouble">gdouble</link> **points_pairs);
<link linkend="gchar">gchar</link>*              <link linkend="gimp-path-get-current">gimp_path_get_current</link>               (<link linkend="gint32">gint32</link> image_ID);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-set-current">gimp_path_set_current</link>               (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-set-points">gimp_path_set_points</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> ptype,
                                                         <link linkend="gint">gint</link> num_path_points,
                                                         const <link linkend="gdouble">gdouble</link> *points_pairs);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-stroke-current">gimp_path_stroke_current</link>            (<link linkend="gint32">gint32</link> image_ID);
<link linkend="gint">gint</link>                <link linkend="gimp-path-get-point-at-dist">gimp_path_get_point_at_dist</link>         (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gdouble">gdouble</link> distance,
                                                         <link linkend="gint">gint</link> *y_point,
                                                         <link linkend="gdouble">gdouble</link> *slope);
<link linkend="gint">gint</link>                <link linkend="gimp-path-get-tattoo">gimp_path_get_tattoo</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gchar">gchar</link>*              <link linkend="gimp-get-path-by-tattoo">gimp_get_path_by_tattoo</link>             (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gint">gint</link> tattoo);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-delete">gimp_path_delete</link>                    (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gint">gint</link>                <link linkend="gimp-path-get-locked">gimp_path_get_locked</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-set-locked">gimp_path_set_locked</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> lockstatus);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-set-tattoo">gimp_path_set_tattoo</link>                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> tattovalue);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-to-selection">gimp_path_to_selection</link>              (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GimpChannelOps">GimpChannelOps</link> op,
                                                         <link linkend="gboolean">gboolean</link> antialias,
                                                         <link linkend="gboolean">gboolean</link> feather,
                                                         <link linkend="gdouble">gdouble</link> feather_radius_x,
                                                         <link linkend="gdouble">gdouble</link> feather_radius_y);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-path-import">gimp_path_import</link>                    (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="gboolean">gboolean</link> merge,
                                                         <link linkend="gboolean">gboolean</link> scale);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Operations related to paths.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="gimp-path-list" role="function"/>gimp_path_list ()</title>
<indexterm><primary>gimp_path_list</primary></indexterm><programlisting><link linkend="gchar">gchar</link>**             gimp_path_list                      (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gint">gint</link> *num_paths);</programlisting>
<para>
List the paths associated with the passed image.
</para>
<para>
List the paths associated with the passed image.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image to list the paths from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_paths</parameter>&nbsp;:</term>
<listitem><simpara> The number of paths returned.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> List of the paths belonging to this image.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-get-points" role="function"/>gimp_path_get_points ()</title>
<indexterm><primary>gimp_path_get_points</primary></indexterm><programlisting><link linkend="gint">gint</link>                gimp_path_get_points                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> *path_closed,
                                                         <link linkend="gint">gint</link> *num_path_point_details,
                                                         <link linkend="gdouble">gdouble</link> **points_pairs);</programlisting>
<para>
List the points associated with the named path.
</para>
<para>
List the points associated with the named path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image to list the paths from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path whose points should be listed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path_closed</parameter>&nbsp;:</term>
<listitem><simpara> Return if the path is closed. (0 = path open, 1 = path closed).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_path_point_details</parameter>&nbsp;:</term>
<listitem><simpara> The number of points returned. Each point is made up of (x, y, pnt_type) of floats.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>points_pairs</parameter>&nbsp;:</term>
<listitem><simpara> The points in the path represented as 3 floats. The first is the x pos, next is the y pos, last is the type of the pnt. The type field is dependant on the path type. For beziers (type 1 paths) the type can either be (1.0 = BEZIER_ANCHOR, 2.0 = BEZIER_CONTROL, 3.0 = BEZIER_MOVE). Note all points are returned in pixel resolution.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The type of the path. Currently only one type (1 = Bezier) is supported.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-get-current" role="function"/>gimp_path_get_current ()</title>
<indexterm><primary>gimp_path_get_current</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gimp_path_get_current               (<link linkend="gint32">gint32</link> image_ID);</programlisting>
<para>
The name of the current path. Error if no paths.
</para>
<para>
The name of the current path. Error if no paths.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image to get the current path from.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The name of the current path.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-set-current" role="function"/>gimp_path_set_current ()</title>
<indexterm><primary>gimp_path_set_current</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_set_current               (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Sets the current path associated with the passed image.
</para>
<para>
Sets a named path as the current path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image in which a path will become current.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path to make current.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-set-points" role="function"/>gimp_path_set_points ()</title>
<indexterm><primary>gimp_path_set_points</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_set_points                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> ptype,
                                                         <link linkend="gint">gint</link> num_path_points,
                                                         const <link linkend="gdouble">gdouble</link> *points_pairs);</programlisting>
<para>
Set the points associated with the named path.
</para>
<para>
Set the points associated with the named path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image to set the paths in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path to create. If it exists then a unique name will be created - query the list of paths if you want to make sure that the name of the path you create is unique. This will be set as the current path.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptype</parameter>&nbsp;:</term>
<listitem><simpara> The type of the path. Currently only one type (1 = Bezier) is supported.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_path_points</parameter>&nbsp;:</term>
<listitem><simpara> The number of elements in the array, i.e. the number of points in the path * 3. Each point is made up of (x, y, type) of floats. Currently only the creation of bezier curves is allowed. The type parameter must be set to (1) to indicate a BEZIER type curve. Note that for BEZIER curves, points must be given in the following order: ACCACCAC... If the path is not closed the last control point is missed off. Points consist of three control points (control/anchor/control) so for a curve that is not closed there must be at least two points passed (2 x,y pairs). If (num_path_points/3) % 3 = 0 then the path is assumed to be closed and the points are ACCACCACCACC.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>points_pairs</parameter>&nbsp;:</term>
<listitem><simpara> The points in the path represented as 3 floats. The first is the x pos, next is the y pos, last is the type of the pnt. The type field is dependant on the path type. For beziers (type 1 paths) the type can either be (1.0 = BEZIER_ANCHOR, 2.0 = BEZIER_CONTROL, 3.0= BEZIER_MOVE). Note all points are returned in pixel resolution.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-stroke-current" role="function"/>gimp_path_stroke_current ()</title>
<indexterm><primary>gimp_path_stroke_current</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_stroke_current            (<link linkend="gint32">gint32</link> image_ID);</programlisting>
<para>
Stroke the current path in the passed image.
</para>
<para>
Stroke the current path in the passed image.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image which contains the path to stroke.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-get-point-at-dist" role="function"/>gimp_path_get_point_at_dist ()</title>
<indexterm><primary>gimp_path_get_point_at_dist</primary></indexterm><programlisting><link linkend="gint">gint</link>                gimp_path_get_point_at_dist         (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gdouble">gdouble</link> distance,
                                                         <link linkend="gint">gint</link> *y_point,
                                                         <link linkend="gdouble">gdouble</link> *slope);</programlisting>
<para>
Get point on a path at a specified distance along the path.
</para>
<para>
This will return the x,y position of a point at a given distance
along the bezier curve. The distance will be obtained by first
digitizing the curve internally and then walking along the curve.
For a closed curve the start of the path is the first point on the
path that was created. This might not be obvious. Note the current
path is used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image the paths belongs to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>distance</parameter>&nbsp;:</term>
<listitem><simpara> The distance along the path.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>y_point</parameter>&nbsp;:</term>
<listitem><simpara> The y position of the point.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>slope</parameter>&nbsp;:</term>
<listitem><simpara> The slope (dy / dx) at the specified point.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The x position of the point.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-get-tattoo" role="function"/>gimp_path_get_tattoo ()</title>
<indexterm><primary>gimp_path_get_tattoo</primary></indexterm><programlisting><link linkend="gint">gint</link>                gimp_path_get_tattoo                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Returns the tattoo associated with the name path.
</para>
<para>
This procedure returns the tattoo associated with the specified
path. A tattoo is a unique and permanent identifier attached to a
path that can be used to uniquely identify a path within an image
even between sessions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path whose tattoo should be obtained.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The tattoo associated with the named path.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-get-path-by-tattoo" role="function"/>gimp_get_path_by_tattoo ()</title>
<indexterm><primary>gimp_get_path_by_tattoo</primary></indexterm><programlisting><link linkend="gchar">gchar</link>*              gimp_get_path_by_tattoo             (<link linkend="gint32">gint32</link> image_ID,
                                                         <link linkend="gint">gint</link> tattoo);</programlisting>
<para>
Return the name of the path with the given tattoo.
</para>
<para>
The procedure returns the name of the path in the specified image
which has the passed tattoo. The tattoos are unique within the image
and will be preserved across sessions and through renaming of the
path. An error is returned if no path with the specified tattoo can
be found.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tattoo</parameter>&nbsp;:</term>
<listitem><simpara> The tattoo of the required path.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The name of the path with the specified tattoo.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-delete" role="function"/>gimp_path_delete ()</title>
<indexterm><primary>gimp_path_delete</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_delete                    (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Delete the named path associated with the passed image.
</para>
<para>
Delete the named path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The ID of the image to delete the path from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path to delete.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-get-locked" role="function"/>gimp_path_get_locked ()</title>
<indexterm><primary>gimp_path_get_locked</primary></indexterm><programlisting><link linkend="gint">gint</link>                gimp_path_get_locked                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name);</programlisting>
<para>
Returns the locked status associated with the named path.
</para>
<para>
This procedure returns the lock status associated with the specified
path. A path can be \"locked\" which means that the transformation
tool operations will also apply to the path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path whose locked status should be obtained.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The lock status associated with the name path. 0 is returned if the path is not locked. 1 is returned if the path is locked.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-set-locked" role="function"/>gimp_path_set_locked ()</title>
<indexterm><primary>gimp_path_set_locked</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_set_locked                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> lockstatus);</programlisting>
<para>
Set the locked status associated with the named path.
</para>
<para>
This procedure sets the lock status associated with the specified
path. A path can be \"locked\" which means that the transformation
tool operations will also apply to the path.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the path whose locked status should be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lockstatus</parameter>&nbsp;:</term>
<listitem><simpara> The lock status associated with the name path. 0 if the path is not locked. 1 if the path is to be locked.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-set-tattoo" role="function"/>gimp_path_set_tattoo ()</title>
<indexterm><primary>gimp_path_set_tattoo</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_set_tattoo                (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> tattovalue);</programlisting>
<para>
Sets the tattoo associated with the named path.
</para>
<para>
This procedure sets the tattoo associated with the specified path. A
tattoo is a unique and permenant identifier attached to a path that
can be used to uniquely identify a path within an image even between
sessions. Note that the value passed to this function must have been
obtained from a previous call to path_get_tattoo.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> the name of the path whose tattoo should be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tattovalue</parameter>&nbsp;:</term>
<listitem><simpara> The tattoo associated with the name path. Only values returned from 'path_get_tattoo' should be used here.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-to-selection" role="function"/>gimp_path_to_selection ()</title>
<indexterm><primary>gimp_path_to_selection</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_to_selection              (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GimpChannelOps">GimpChannelOps</link> op,
                                                         <link linkend="gboolean">gboolean</link> antialias,
                                                         <link linkend="gboolean">gboolean</link> feather,
                                                         <link linkend="gdouble">gdouble</link> feather_radius_x,
                                                         <link linkend="gdouble">gdouble</link> feather_radius_y);</programlisting>
<para>
Transforms the active path into a selection
</para>
<para>
This procedure renders the desired path into the current selection.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> The name of the path which should be made into selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>op</parameter>&nbsp;:</term>
<listitem><simpara> The desired operation with current selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>antialias</parameter>&nbsp;:</term>
<listitem><simpara> Antialias selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feather</parameter>&nbsp;:</term>
<listitem><simpara> Feather selection.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feather_radius_x</parameter>&nbsp;:</term>
<listitem><simpara> Feather radius x.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>feather_radius_y</parameter>&nbsp;:</term>
<listitem><simpara> Feather radius y.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gimp-path-import" role="function"/>gimp_path_import ()</title>
<indexterm><primary>gimp_path_import</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_path_import                    (<link linkend="gint32">gint32</link> image_ID,
                                                         const <link linkend="gchar">gchar</link> *filename,
                                                         <link linkend="gboolean">gboolean</link> merge,
                                                         <link linkend="gboolean">gboolean</link> scale);</programlisting>
<para>
Import paths from an SVG file.
</para>
<para>
This procedure imports paths from an SVG file. This is a temporary
solution until the new vectors PDB API is in place. Don't rely on
this function being available in future GIMP releases.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>image_ID</parameter>&nbsp;:</term>
<listitem><simpara> The image.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> The name of the SVG file to import.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>merge</parameter>&nbsp;:</term>
<listitem><simpara> Merge paths into a single vectors object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>scale</parameter>&nbsp;:</term>
<listitem><simpara> Scale the SVG to image dimensions.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE on success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>

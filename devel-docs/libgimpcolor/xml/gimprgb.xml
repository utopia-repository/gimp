<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="libgimpcolor-GimpRGB">
<refmeta>
<refentrytitle role="top_of_page" id="libgimpcolor-GimpRGB.top_of_page">GimpRGB</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGIMPCOLOR Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GimpRGB</refname>
<refpurpose>Definitions and Functions relating to RGB colors.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libgimpcolor-GimpRGB.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GimpRGB">GimpRGB</link>;
enum                <link linkend="GimpRGBCompositeMode">GimpRGBCompositeMode</link>;
<link linkend="void">void</link>                <link linkend="gimp-rgb-set">gimp_rgb_set</link>                        (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> red,
                                                         <link linkend="gdouble">gdouble</link> green,
                                                         <link linkend="gdouble">gdouble</link> blue);
<link linkend="void">void</link>                <link linkend="gimp-rgb-set-alpha">gimp_rgb_set_alpha</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> alpha);
<link linkend="void">void</link>                <link linkend="gimp-rgb-set-uchar">gimp_rgb_set_uchar</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="guchar">guchar</link> red,
                                                         <link linkend="guchar">guchar</link> green,
                                                         <link linkend="guchar">guchar</link> blue);
<link linkend="void">void</link>                <link linkend="gimp-rgb-get-uchar">gimp_rgb_get_uchar</link>                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="guchar">guchar</link> *red,
                                                         <link linkend="guchar">guchar</link> *green,
                                                         <link linkend="guchar">guchar</link> *blue);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-rgb-parse-name">gimp_rgb_parse_name</link>                 (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> len);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-rgb-parse-hex">gimp_rgb_parse_hex</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *hex,
                                                         <link linkend="gint">gint</link> len);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-rgb-parse-css">gimp_rgb_parse_css</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *css,
                                                         <link linkend="gint">gint</link> len);
<link linkend="gint">gint</link>                <link linkend="gimp-rgb-list-names">gimp_rgb_list_names</link>                 (const <link linkend="gchar">gchar</link> ***names,
                                                         <link linkend="GimpRGB">GimpRGB</link> **colors);
<link linkend="void">void</link>                <link linkend="gimp-rgb-add">gimp_rgb_add</link>                        (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);
<link linkend="void">void</link>                <link linkend="gimp-rgb-subtract">gimp_rgb_subtract</link>                   (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);
<link linkend="void">void</link>                <link linkend="gimp-rgb-multiply">gimp_rgb_multiply</link>                   (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         <link linkend="gdouble">gdouble</link> factor);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgb-distance">gimp_rgb_distance</link>                   (const <link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgb-max">gimp_rgb_max</link>                        (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgb-min">gimp_rgb_min</link>                        (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="void">void</link>                <link linkend="gimp-rgb-clamp">gimp_rgb_clamp</link>                      (<link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="void">void</link>                <link linkend="gimp-rgb-gamma">gimp_rgb_gamma</link>                      (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> gamma);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgb-luminance">gimp_rgb_luminance</link>                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="guchar">guchar</link>              <link linkend="gimp-rgb-luminance-uchar">gimp_rgb_luminance_uchar</link>            (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgb-intensity">gimp_rgb_intensity</link>                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="guchar">guchar</link>              <link linkend="gimp-rgb-intensity-uchar">gimp_rgb_intensity_uchar</link>            (const <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="void">void</link>                <link linkend="gimp-rgb-composite">gimp_rgb_composite</link>                  (<link linkend="GimpRGB">GimpRGB</link> *color1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *color2,
                                                         <link linkend="GimpRGBCompositeMode">GimpRGBCompositeMode</link> mode);
<link linkend="void">void</link>                <link linkend="gimp-rgba-set">gimp_rgba_set</link>                       (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="gdouble">gdouble</link> red,
                                                         <link linkend="gdouble">gdouble</link> green,
                                                         <link linkend="gdouble">gdouble</link> blue,
                                                         <link linkend="gdouble">gdouble</link> alpha);
<link linkend="void">void</link>                <link linkend="gimp-rgba-set-uchar">gimp_rgba_set_uchar</link>                 (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="guchar">guchar</link> red,
                                                         <link linkend="guchar">guchar</link> green,
                                                         <link linkend="guchar">guchar</link> blue,
                                                         <link linkend="guchar">guchar</link> alpha);
<link linkend="void">void</link>                <link linkend="gimp-rgba-get-uchar">gimp_rgba_get_uchar</link>                 (const <link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="guchar">guchar</link> *red,
                                                         <link linkend="guchar">guchar</link> *green,
                                                         <link linkend="guchar">guchar</link> *blue,
                                                         <link linkend="guchar">guchar</link> *alpha);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-rgba-parse-css">gimp_rgba_parse_css</link>                 (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         const <link linkend="gchar">gchar</link> *css,
                                                         <link linkend="gint">gint</link> len);
<link linkend="void">void</link>                <link linkend="gimp-rgba-add">gimp_rgba_add</link>                       (<link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);
<link linkend="void">void</link>                <link linkend="gimp-rgba-subtract">gimp_rgba_subtract</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);
<link linkend="void">void</link>                <link linkend="gimp-rgba-multiply">gimp_rgba_multiply</link>                  (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="gdouble">gdouble</link> factor);
<link linkend="gdouble">gdouble</link>             <link linkend="gimp-rgba-distance">gimp_rgba_distance</link>                  (const <link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);
#define             <link linkend="GIMP-RGB-LUMINANCE--CAPS">GIMP_RGB_LUMINANCE</link>                  (r,g,b)
#define             <link linkend="GIMP-RGB-LUMINANCE-RED--CAPS">GIMP_RGB_LUMINANCE_RED</link>
#define             <link linkend="GIMP-RGB-LUMINANCE-GREEN--CAPS">GIMP_RGB_LUMINANCE_GREEN</link>
#define             <link linkend="GIMP-RGB-LUMINANCE-BLUE--CAPS">GIMP_RGB_LUMINANCE_BLUE</link>
#define             <link linkend="GIMP-RGB-INTENSITY--CAPS">GIMP_RGB_INTENSITY</link>                  (r,g,b)
#define             <link linkend="GIMP-RGB-INTENSITY-RED--CAPS">GIMP_RGB_INTENSITY_RED</link>
#define             <link linkend="GIMP-RGB-INTENSITY-GREEN--CAPS">GIMP_RGB_INTENSITY_GREEN</link>
#define             <link linkend="GIMP-RGB-INTENSITY-BLUE--CAPS">GIMP_RGB_INTENSITY_BLUE</link>
#define             <link linkend="GIMP-TYPE-RGB--CAPS">GIMP_TYPE_RGB</link>
#define             <link linkend="GIMP-TYPE-PARAM-RGB--CAPS">GIMP_TYPE_PARAM_RGB</link>
<link linkend="GParamSpec">GParamSpec</link> *        <link linkend="gimp-param-spec-rgb">gimp_param_spec_rgb</link>                 (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *nick,
                                                         const <link linkend="gchar">gchar</link> *blurb,
                                                         <link linkend="gboolean">gboolean</link> has_alpha,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *default_value,
                                                         <link linkend="GParamFlags">GParamFlags</link> flags);
<link linkend="gboolean">gboolean</link>            <link linkend="gimp-param-spec-rgb-has-alpha">gimp_param_spec_rgb_has_alpha</link>       (<link linkend="GParamSpec">GParamSpec</link> *pspec);
#define             <link linkend="GIMP-VALUE-HOLDS-RGB--CAPS">GIMP_VALUE_HOLDS_RGB</link>                (value)
<link linkend="void">void</link>                <link linkend="gimp-value-get-rgb">gimp_value_get_rgb</link>                  (const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GimpRGB">GimpRGB</link> *rgb);
<link linkend="void">void</link>                <link linkend="gimp-value-set-rgb">gimp_value_set_rgb</link>                  (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libgimpcolor-GimpRGB.description" role="desc">
<title role="desc.title">Description</title>
<para>
Definitions and Functions relating to RGB colors.
</para>
</refsect1>

<refsect1 id="libgimpcolor-GimpRGB.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GimpRGB" role="struct">
<title>GimpRGB</title>
<indexterm zone="GimpRGB"><primary sortas="GimpRGB">GimpRGB</primary></indexterm><programlisting>typedef struct {
  gdouble r, g, b, a;
} GimpRGB;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GimpRGBCompositeMode" role="enum">
<title>enum GimpRGBCompositeMode</title>
<indexterm zone="GimpRGBCompositeMode"><primary sortas="GimpRGBCompositeMode">GimpRGBCompositeMode</primary></indexterm><programlisting>typedef enum
{
  GIMP_RGB_COMPOSITE_NONE = 0,
  GIMP_RGB_COMPOSITE_NORMAL,
  GIMP_RGB_COMPOSITE_BEHIND
} GimpRGBCompositeMode;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gimp-rgb-set" role="function">
<title>gimp_rgb_set ()</title>
<indexterm zone="gimp-rgb-set"><primary sortas="gimp_rgb_set">gimp_rgb_set</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_set                        (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> red,
                                                         <link linkend="gdouble">gdouble</link> green,
                                                         <link linkend="gdouble">gdouble</link> blue);</programlisting>
<para>
Sets the red, green and blue components of <parameter>rgb</parameter> and leaves the
alpha component unchanged. The color values should be between 0.0
and 1.0 but there is no check to enforce this and the values are
set exactly as they are passed in.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-set-alpha" role="function">
<title>gimp_rgb_set_alpha ()</title>
<indexterm zone="gimp-rgb-set-alpha"><primary sortas="gimp_rgb_set_alpha">gimp_rgb_set_alpha</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_set_alpha                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> alpha);</programlisting>
<para>
Sets the alpha component of <parameter>rgb</parameter> and leaves the RGB components unchanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-set-uchar" role="function">
<title>gimp_rgb_set_uchar ()</title>
<indexterm zone="gimp-rgb-set-uchar"><primary sortas="gimp_rgb_set_uchar">gimp_rgb_set_uchar</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_set_uchar                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="guchar">guchar</link> red,
                                                         <link linkend="guchar">guchar</link> green,
                                                         <link linkend="guchar">guchar</link> blue);</programlisting>
<para>
Sets the red, green and blue components of <parameter>rgb</parameter> from 8bit values
(0 to 255) and leaves the alpha component unchanged.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-get-uchar" role="function">
<title>gimp_rgb_get_uchar ()</title>
<indexterm zone="gimp-rgb-get-uchar"><primary sortas="gimp_rgb_get_uchar">gimp_rgb_get_uchar</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_get_uchar                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="guchar">guchar</link> *red,
                                                         <link linkend="guchar">guchar</link> *green,
                                                         <link linkend="guchar">guchar</link> *blue);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-parse-name" role="function" condition="since:GIMP 2.2">
<title>gimp_rgb_parse_name ()</title>
<indexterm zone="gimp-rgb-parse-name" role="GIMP 2.2"><primary sortas="gimp_rgb_parse_name">gimp_rgb_parse_name</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_rgb_parse_name                 (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="gint">gint</link> len);</programlisting>
<para>
Attempts to parse a color name. This function accepts <ulink
url="http://www.w3.org/TR/SVG/types.html">SVG 1.0 color keywords</ulink>.
</para>
<para>
This function does not touch the alpha component of <parameter>rgb</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>  a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct used to return the parsed color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a color name (in UTF-8 encoding)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>  the length of <parameter>name</parameter>, in bytes. or -1 if <parameter>name</parameter> is nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>name</parameter> was parsed successfully and <parameter>rgb</parameter> has
              been set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.2</para></refsect2>
<refsect2 id="gimp-rgb-parse-hex" role="function" condition="since:GIMP 2.2">
<title>gimp_rgb_parse_hex ()</title>
<indexterm zone="gimp-rgb-parse-hex" role="GIMP 2.2"><primary sortas="gimp_rgb_parse_hex">gimp_rgb_parse_hex</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_rgb_parse_hex                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *hex,
                                                         <link linkend="gint">gint</link> len);</programlisting>
<para>
Attempts to parse a string describing an RGB color in hexadecimal
notation (optionally prefixed with a '#').
</para>
<para>
This function does not touch the alpha component of <parameter>rgb</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct used to return the parsed color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hex</parameter>&#160;:</term>
<listitem><simpara> a string describing a color in hexadecimal notation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>hex</parameter>, in bytes. or -1 if <parameter>hex</parameter> is nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>hex</parameter> was parsed successfully and <parameter>rgb</parameter> has
              been set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.2</para></refsect2>
<refsect2 id="gimp-rgb-parse-css" role="function" condition="since:GIMP 2.2">
<title>gimp_rgb_parse_css ()</title>
<indexterm zone="gimp-rgb-parse-css" role="GIMP 2.2"><primary sortas="gimp_rgb_parse_css">gimp_rgb_parse_css</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_rgb_parse_css                  (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         const <link linkend="gchar">gchar</link> *css,
                                                         <link linkend="gint">gint</link> len);</programlisting>
<para>
Attempts to parse a string describing an RGB color in CSS
notation. This can be either a numerical representation
(<code>rgb(255,0,0)</code> or <code>rgb(100%,0%,0%)</code>)
or a hexadecimal notation as parsed by <link linkend="gimp-rgb-parse-hex"><function>gimp_rgb_parse_hex()</function></link>
(<code>#<link linkend="ff0000"><type>ff0000</type></link></code>) or a color name as parsed by
<link linkend="gimp-rgb-parse-name"><function>gimp_rgb_parse_name()</function></link> (<code>red</code>).
</para>
<para>
This function does not touch the alpha component of <parameter>rgb</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct used to return the parsed color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>css</parameter>&#160;:</term>
<listitem><simpara> a string describing a color in CSS notation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>hex</parameter>, in bytes. or -1 if <parameter>hex</parameter> is nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>css</parameter> was parsed successfully and <parameter>rgb</parameter> has been
              set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.2</para></refsect2>
<refsect2 id="gimp-rgb-list-names" role="function" condition="since:GIMP 2.2">
<title>gimp_rgb_list_names ()</title>
<indexterm zone="gimp-rgb-list-names" role="GIMP 2.2"><primary sortas="gimp_rgb_list_names">gimp_rgb_list_names</primary></indexterm><programlisting><link linkend="gint">gint</link>                gimp_rgb_list_names                 (const <link linkend="gchar">gchar</link> ***names,
                                                         <link linkend="GimpRGB">GimpRGB</link> **colors);</programlisting>
<para>
Allows to retrieve the list of <ulink
url="http://www.w3.org/TR/SVG/types.html">SVG 1.0 color
keywords</ulink> that is used by <link linkend="gimp-rgb-parse-name"><function>gimp_rgb_parse_name()</function></link>.
</para>
<para>
The returned strings are const and must not be freed. Only the two
arrays are allocated dynamically. You must call <link linkend="g-free"><function>g_free()</function></link> on the
<parameter>names</parameter> and <parameter>colors</parameter> arrays when they are not any longer needed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>names</parameter>&#160;:</term>
<listitem><simpara>  return location for an array of color names
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>colors</parameter>&#160;:</term>
<listitem><simpara> return location for an array of GimpRGB structs
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of named colors
              (i.e. the length of the returned arrays)

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.2</para></refsect2>
<refsect2 id="gimp-rgb-add" role="function">
<title>gimp_rgb_add ()</title>
<indexterm zone="gimp-rgb-add"><primary sortas="gimp_rgb_add">gimp_rgb_add</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_add                        (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgb2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-subtract" role="function">
<title>gimp_rgb_subtract ()</title>
<indexterm zone="gimp-rgb-subtract"><primary sortas="gimp_rgb_subtract">gimp_rgb_subtract</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_subtract                   (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgb2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-multiply" role="function">
<title>gimp_rgb_multiply ()</title>
<indexterm zone="gimp-rgb-multiply"><primary sortas="gimp_rgb_multiply">gimp_rgb_multiply</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_multiply                   (<link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         <link linkend="gdouble">gdouble</link> factor);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factor</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-distance" role="function">
<title>gimp_rgb_distance ()</title>
<indexterm zone="gimp-rgb-distance"><primary sortas="gimp_rgb_distance">gimp_rgb_distance</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgb_distance                   (const <link linkend="GimpRGB">GimpRGB</link> *rgb1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgb2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-max" role="function">
<title>gimp_rgb_max ()</title>
<indexterm zone="gimp-rgb-max"><primary sortas="gimp_rgb_max">gimp_rgb_max</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgb_max                        (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-min" role="function">
<title>gimp_rgb_min ()</title>
<indexterm zone="gimp-rgb-min"><primary sortas="gimp_rgb_min">gimp_rgb_min</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgb_min                        (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-clamp" role="function">
<title>gimp_rgb_clamp ()</title>
<indexterm zone="gimp-rgb-clamp"><primary sortas="gimp_rgb_clamp">gimp_rgb_clamp</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_clamp                      (<link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-gamma" role="function">
<title>gimp_rgb_gamma ()</title>
<indexterm zone="gimp-rgb-gamma"><primary sortas="gimp_rgb_gamma">gimp_rgb_gamma</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_gamma                      (<link linkend="GimpRGB">GimpRGB</link> *rgb,
                                                         <link linkend="gdouble">gdouble</link> gamma);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>gamma</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-luminance" role="function" condition="since:GIMP 2.4">
<title>gimp_rgb_luminance ()</title>
<indexterm zone="gimp-rgb-luminance" role="GIMP 2.4"><primary sortas="gimp_rgb_luminance">gimp_rgb_luminance</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgb_luminance                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the luminous intensity of the range from 0.0 to 1.0.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.4</para></refsect2>
<refsect2 id="gimp-rgb-luminance-uchar" role="function" condition="since:GIMP 2.4">
<title>gimp_rgb_luminance_uchar ()</title>
<indexterm zone="gimp-rgb-luminance-uchar" role="GIMP 2.4"><primary sortas="gimp_rgb_luminance_uchar">gimp_rgb_luminance_uchar</primary></indexterm><programlisting><link linkend="guchar">guchar</link>              gimp_rgb_luminance_uchar            (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the luminous intensity in the range from 0 to 255.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.4</para></refsect2>
<refsect2 id="gimp-rgb-intensity" role="function" condition="deprecated:">
<title>gimp_rgb_intensity ()</title>
<indexterm zone="gimp-rgb-intensity" role="deprecated"><primary sortas="gimp_rgb_intensity">gimp_rgb_intensity</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgb_intensity                  (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<warning><para><literal>gimp_rgb_intensity</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated! Use <link linkend="gimp-rgb-luminance"><function>gimp_rgb_luminance()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the intensity in the range from 0.0 to 1.0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-intensity-uchar" role="function" condition="deprecated:">
<title>gimp_rgb_intensity_uchar ()</title>
<indexterm zone="gimp-rgb-intensity-uchar" role="deprecated"><primary sortas="gimp_rgb_intensity_uchar">gimp_rgb_intensity_uchar</primary></indexterm><programlisting><link linkend="guchar">guchar</link>              gimp_rgb_intensity_uchar            (const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<warning><para><literal>gimp_rgb_intensity_uchar</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This function is deprecated! Use <link linkend="gimp-rgb-luminance-uchar"><function>gimp_rgb_luminance_uchar()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the intensity in the range from 0 to 255.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgb-composite" role="function">
<title>gimp_rgb_composite ()</title>
<indexterm zone="gimp-rgb-composite"><primary sortas="gimp_rgb_composite">gimp_rgb_composite</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgb_composite                  (<link linkend="GimpRGB">GimpRGB</link> *color1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *color2,
                                                         <link linkend="GimpRGBCompositeMode">GimpRGBCompositeMode</link> mode);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>color1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>color2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-set" role="function">
<title>gimp_rgba_set ()</title>
<indexterm zone="gimp-rgba-set"><primary sortas="gimp_rgba_set">gimp_rgba_set</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_set                       (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="gdouble">gdouble</link> red,
                                                         <link linkend="gdouble">gdouble</link> green,
                                                         <link linkend="gdouble">gdouble</link> blue,
                                                         <link linkend="gdouble">gdouble</link> alpha);</programlisting>
<para>
Sets the red, green, blue and alpha components of <parameter>rgb</parameter>. The values
should be between 0.0 and 1.0 but there is no check to enforce this
and the values are set exactly as they are passed in.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-set-uchar" role="function">
<title>gimp_rgba_set_uchar ()</title>
<indexterm zone="gimp-rgba-set-uchar"><primary sortas="gimp_rgba_set_uchar">gimp_rgba_set_uchar</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_set_uchar                 (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="guchar">guchar</link> red,
                                                         <link linkend="guchar">guchar</link> green,
                                                         <link linkend="guchar">guchar</link> blue,
                                                         <link linkend="guchar">guchar</link> alpha);</programlisting>
<para>
Sets the red, green, blue and alpha components of <parameter>rgb</parameter> from 8bit
values (0 to 255).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-get-uchar" role="function">
<title>gimp_rgba_get_uchar ()</title>
<indexterm zone="gimp-rgba-get-uchar"><primary sortas="gimp_rgba_get_uchar">gimp_rgba_get_uchar</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_get_uchar                 (const <link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="guchar">guchar</link> *red,
                                                         <link linkend="guchar">guchar</link> *green,
                                                         <link linkend="guchar">guchar</link> *blue,
                                                         <link linkend="guchar">guchar</link> *alpha);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>red</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>green</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blue</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>alpha</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-parse-css" role="function" condition="since:GIMP 2.2">
<title>gimp_rgba_parse_css ()</title>
<indexterm zone="gimp-rgba-parse-css" role="GIMP 2.2"><primary sortas="gimp_rgba_parse_css">gimp_rgba_parse_css</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_rgba_parse_css                 (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         const <link linkend="gchar">gchar</link> *css,
                                                         <link linkend="gint">gint</link> len);</programlisting>
<para>
Similar to <link linkend="gimp-rgb-parse-css"><function>gimp_rgb_parse_css()</function></link> but handles RGB colors with alpha
channel in the numerical CSS notation (<code>rgba(255,0,0,255)</code>
or <code>rgba(100%,0%,0%,1000%)</code>).
</para>
<para>
It doesn't handle the hexadecimal notation or color names because
they leave the alpha channel unspecified.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GimpRGB"><type>GimpRGB</type></link> struct used to return the parsed color
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>css</parameter>&#160;:</term>
<listitem><simpara> a string describing a color in CSS notation
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>hex</parameter>, in bytes. or -1 if <parameter>hex</parameter> is nul-terminated
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>css</parameter> was parsed successfully and <parameter>rgb</parameter> has been
              set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.2</para></refsect2>
<refsect2 id="gimp-rgba-add" role="function">
<title>gimp_rgba_add ()</title>
<indexterm zone="gimp-rgba-add"><primary sortas="gimp_rgba_add">gimp_rgba_add</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_add                       (<link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgba2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-subtract" role="function">
<title>gimp_rgba_subtract ()</title>
<indexterm zone="gimp-rgba-subtract"><primary sortas="gimp_rgba_subtract">gimp_rgba_subtract</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_subtract                  (<link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgba2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-multiply" role="function">
<title>gimp_rgba_multiply ()</title>
<indexterm zone="gimp-rgba-multiply"><primary sortas="gimp_rgba_multiply">gimp_rgba_multiply</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_rgba_multiply                  (<link linkend="GimpRGB">GimpRGB</link> *rgba,
                                                         <link linkend="gdouble">gdouble</link> factor);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>factor</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-rgba-distance" role="function">
<title>gimp_rgba_distance ()</title>
<indexterm zone="gimp-rgba-distance"><primary sortas="gimp_rgba_distance">gimp_rgba_distance</primary></indexterm><programlisting><link linkend="gdouble">gdouble</link>             gimp_rgba_distance                  (const <link linkend="GimpRGB">GimpRGB</link> *rgba1,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgba2);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>rgba1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgba2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GIMP-RGB-LUMINANCE--CAPS" role="macro">
<title>GIMP_RGB_LUMINANCE()</title>
<indexterm zone="GIMP-RGB-LUMINANCE--CAPS"><primary sortas="GIMP_RGB_LUMINANCE">GIMP_RGB_LUMINANCE</primary></indexterm><programlisting>#define             GIMP_RGB_LUMINANCE(r,g,b)</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GIMP-RGB-LUMINANCE-RED--CAPS" role="macro">
<title>GIMP_RGB_LUMINANCE_RED</title>
<indexterm zone="GIMP-RGB-LUMINANCE-RED--CAPS"><primary sortas="GIMP_RGB_LUMINANCE_RED">GIMP_RGB_LUMINANCE_RED</primary></indexterm><programlisting>#define GIMP_RGB_LUMINANCE_RED    (0.2126)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GIMP-RGB-LUMINANCE-GREEN--CAPS" role="macro">
<title>GIMP_RGB_LUMINANCE_GREEN</title>
<indexterm zone="GIMP-RGB-LUMINANCE-GREEN--CAPS"><primary sortas="GIMP_RGB_LUMINANCE_GREEN">GIMP_RGB_LUMINANCE_GREEN</primary></indexterm><programlisting>#define GIMP_RGB_LUMINANCE_GREEN  (0.7152)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GIMP-RGB-LUMINANCE-BLUE--CAPS" role="macro">
<title>GIMP_RGB_LUMINANCE_BLUE</title>
<indexterm zone="GIMP-RGB-LUMINANCE-BLUE--CAPS"><primary sortas="GIMP_RGB_LUMINANCE_BLUE">GIMP_RGB_LUMINANCE_BLUE</primary></indexterm><programlisting>#define GIMP_RGB_LUMINANCE_BLUE   (0.0722)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GIMP-RGB-INTENSITY--CAPS" role="macro" condition="deprecated:">
<title>GIMP_RGB_INTENSITY()</title>
<indexterm zone="GIMP-RGB-INTENSITY--CAPS" role="deprecated"><primary sortas="GIMP_RGB_INTENSITY">GIMP_RGB_INTENSITY</primary></indexterm><programlisting>#define             GIMP_RGB_INTENSITY(r,g,b)</programlisting>
<warning><para><literal>GIMP_RGB_INTENSITY</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
This macro calculates the intensity of an RGB value based on
coefficients taken from the NTSC analog television standard.
</para><variablelist role="params">
<varlistentry><term><parameter>r</parameter>&#160;:</term>
<listitem><simpara>red
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>g</parameter>&#160;:</term>
<listitem><simpara>green
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&#160;:</term>
<listitem><simpara>blue
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="GIMP-RGB-INTENSITY-RED--CAPS" role="macro" condition="deprecated:">
<title>GIMP_RGB_INTENSITY_RED</title>
<indexterm zone="GIMP-RGB-INTENSITY-RED--CAPS" role="deprecated"><primary sortas="GIMP_RGB_INTENSITY_RED">GIMP_RGB_INTENSITY_RED</primary></indexterm><programlisting>#define GIMP_RGB_INTENSITY_RED    (0.30)
</programlisting>
<warning><para><literal>GIMP_RGB_INTENSITY_RED</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
</para></refsect2>
<refsect2 id="GIMP-RGB-INTENSITY-GREEN--CAPS" role="macro" condition="deprecated:">
<title>GIMP_RGB_INTENSITY_GREEN</title>
<indexterm zone="GIMP-RGB-INTENSITY-GREEN--CAPS" role="deprecated"><primary sortas="GIMP_RGB_INTENSITY_GREEN">GIMP_RGB_INTENSITY_GREEN</primary></indexterm><programlisting>#define GIMP_RGB_INTENSITY_GREEN  (0.59)
</programlisting>
<warning><para><literal>GIMP_RGB_INTENSITY_GREEN</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
</para></refsect2>
<refsect2 id="GIMP-RGB-INTENSITY-BLUE--CAPS" role="macro" condition="deprecated:">
<title>GIMP_RGB_INTENSITY_BLUE</title>
<indexterm zone="GIMP-RGB-INTENSITY-BLUE--CAPS" role="deprecated"><primary sortas="GIMP_RGB_INTENSITY_BLUE">GIMP_RGB_INTENSITY_BLUE</primary></indexterm><programlisting>#define GIMP_RGB_INTENSITY_BLUE   (0.11)
</programlisting>
<warning><para><literal>GIMP_RGB_INTENSITY_BLUE</literal> is deprecated and should not be used in newly-written code.</para></warning>
<para>
</para></refsect2>
<refsect2 id="GIMP-TYPE-RGB--CAPS" role="macro">
<title>GIMP_TYPE_RGB</title>
<indexterm zone="GIMP-TYPE-RGB--CAPS"><primary sortas="GIMP_TYPE_RGB">GIMP_TYPE_RGB</primary></indexterm><programlisting>#define GIMP_TYPE_RGB               (gimp_rgb_get_type ())
</programlisting>
<para>
<link linkend="GIMP-TYPE-RGB--CAPS"><type>GIMP_TYPE_RGB</type></link> is a <link linkend="GType"><type>GType</type></link> derived from <link linkend="G-TYPE-BOXED--CAPS"><type>G_TYPE_BOXED</type></link>.
</para></refsect2>
<refsect2 id="GIMP-TYPE-PARAM-RGB--CAPS" role="macro">
<title>GIMP_TYPE_PARAM_RGB</title>
<indexterm zone="GIMP-TYPE-PARAM-RGB--CAPS"><primary sortas="GIMP_TYPE_PARAM_RGB">GIMP_TYPE_PARAM_RGB</primary></indexterm><programlisting>#define GIMP_TYPE_PARAM_RGB           (gimp_param_rgb_get_type ())
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gimp-param-spec-rgb" role="function" condition="since:GIMP 2.4">
<title>gimp_param_spec_rgb ()</title>
<indexterm zone="gimp-param-spec-rgb" role="GIMP 2.4"><primary sortas="gimp_param_spec_rgb">gimp_param_spec_rgb</primary></indexterm><programlisting><link linkend="GParamSpec">GParamSpec</link> *        gimp_param_spec_rgb                 (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *nick,
                                                         const <link linkend="gchar">gchar</link> *blurb,
                                                         <link linkend="gboolean">gboolean</link> has_alpha,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *default_value,
                                                         <link linkend="GParamFlags">GParamFlags</link> flags);</programlisting>
<para>
Creates a param spec to hold an <link linkend="GimpRGB"><type>GimpRGB</type></link> value.
See <link linkend="g-param-spec-internal"><function>g_param_spec_internal()</function></link> for more information.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>          Canonical name of the param
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nick</parameter>&#160;:</term>
<listitem><simpara>          Nickname of the param
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>blurb</parameter>&#160;:</term>
<listitem><simpara>         Brief desciption of param.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>has_alpha</parameter>&#160;:</term>
<listitem><simpara>     <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the alpha channel has relevance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_value</parameter>&#160;:</term>
<listitem><simpara> Value to use if none is assigned.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>         a combination of <link linkend="GParamFlags"><type>GParamFlags</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated <link linkend="GParamSpec"><type>GParamSpec</type></link> instance

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.4</para></refsect2>
<refsect2 id="gimp-param-spec-rgb-has-alpha" role="function" condition="since:GIMP 2.4">
<title>gimp_param_spec_rgb_has_alpha ()</title>
<indexterm zone="gimp-param-spec-rgb-has-alpha" role="GIMP 2.4"><primary sortas="gimp_param_spec_rgb_has_alpha">gimp_param_spec_rgb_has_alpha</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gimp_param_spec_rgb_has_alpha       (<link linkend="GParamSpec">GParamSpec</link> *pspec);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pspec</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GParamSpec"><type>GParamSpec</type></link> to hold an <link linkend="GimpRGB"><type>GimpRGB</type></link> value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the alpha channel is relevant.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since GIMP 2.4</para></refsect2>
<refsect2 id="GIMP-VALUE-HOLDS-RGB--CAPS" role="macro">
<title>GIMP_VALUE_HOLDS_RGB()</title>
<indexterm zone="GIMP-VALUE-HOLDS-RGB--CAPS"><primary sortas="GIMP_VALUE_HOLDS_RGB">GIMP_VALUE_HOLDS_RGB</primary></indexterm><programlisting>#define GIMP_VALUE_HOLDS_RGB(value) (G_TYPE_CHECK_VALUE_TYPE ((value), GIMP_TYPE_RGB))
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-value-get-rgb" role="function">
<title>gimp_value_get_rgb ()</title>
<indexterm zone="gimp-value-get-rgb"><primary sortas="gimp_value_get_rgb">gimp_value_get_rgb</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_value_get_rgb                  (const <link linkend="GValue">GValue</link> *value,
                                                         <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gimp-value-set-rgb" role="function">
<title>gimp_value_set_rgb ()</title>
<indexterm zone="gimp-value-set-rgb"><primary sortas="gimp_value_set_rgb">gimp_value_set_rgb</primary></indexterm><programlisting><link linkend="void">void</link>                gimp_value_set_rgb                  (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="GimpRGB">GimpRGB</link> *rgb);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rgb</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>

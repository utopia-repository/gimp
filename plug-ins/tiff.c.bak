/*
** tifftopnm.c - converts a Tagged Image File to a portable anymap
**
** Derived by Jef Poskanzer from tif2ras.c, which is:
**
** Copyright (c) 1990 by Sun Microsystems, Inc.
**
** Author: Patrick J. Naughton
** naughton@wind.sun.com
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted,
** provided that the above copyright notice appear in all copies and that
** both that copyright notice and this permission notice appear in
** supporting documentation.
**
** This file is provided AS IS with no warranties of any kind.  The author
** shall have no liability with respect to the infringement of copyrights,
** trade secrets or any patents by this file or any part thereof.  In no
** event will the author be liable for any lost revenue or profits or
** other special, indirect and consequential damages.
*/

#include <stdlib.h>
#include <tiffio.h>
#include "filter.h"

/* Declare some local functions.
 */
static void load_image (char *);
static void save_image (char *);

char *prog_name;

void
main (argc, argv)
     int argc;
     char **argv;
{
  /* Save the program name so we can use it later in reporting errors
   */
  prog_name = argv[0];

  /* Call 'filter_init' to initialize this filter.
   * 'filter_init' makes sure that the filter was properly called and
   *  it opens pipes for reading and writing.
   */
  if (filter_init (argc, argv))
    {
      /* This is a file filter so all it needs to know about is loading
       *  and saving images. So we'll install handlers for those two
       *  messages.
       */
      filter_install_load_save_handlers (load_image, save_image);

      /* Run until something happens. That something could be getting
       *  a 'QUIT' message or getting a load or save message.
       */
      filter_main_loop ();
    }
}

static void
load_image (filename)
     char *filename;
{
  register TIFF *tif;
  register int col;
  register unsigned char *inP;
  register unsigned char sample;
  register int bitsleft;
  int cols, rows, grayscale;
  int numcolors;
  int row, i;
  unsigned char *buf;
  int maxval;
  unsigned short bps, spp, photomet;
  unsigned short *redcolormap;
  unsigned short *greencolormap;
  unsigned short *bluecolormap;
  Image image;
  unsigned char *dest;

  tif = TIFFOpen (filename, "r");
  if (!tif)
    {
      printf ("%s: can't open \"%s\"\n", prog_name, filename);
      filter_quit ();
    }

  if (!TIFFGetField (tif, TIFFTAG_BITSPERSAMPLE, &bps))
    bps = 1;
  if (!TIFFGetField (tif, TIFFTAG_SAMPLESPERPIXEL, &spp))
    spp = 1;
  if (!TIFFGetField (tif, TIFFTAG_PHOTOMETRIC, &photomet))
    {
      printf ("%s: error getting photometric\n", prog_name);
      filter_quit ();
    }

  switch (spp)
    {
    case 1:
    case 3:
    case 4:
      break;
    default:
      printf ("%s: can only handle 1-channel gray scale or 1- or 3-channel color\n", prog_name);
      filter_quit ();
    }

  TIFFGetField (tif, TIFFTAG_IMAGEWIDTH, &cols);
  TIFFGetField (tif, TIFFTAG_IMAGELENGTH, &rows);

  maxval = (1 << bps) - 1;
  if (maxval == 1 && spp == 1)
    {
      grayscale = 1;
    }
  else
    {
      switch (photomet)
	{
	case PHOTOMETRIC_MINISBLACK:
	  grayscale = 1;
	  break;

	case PHOTOMETRIC_MINISWHITE:
	  grayscale = 1;
	  break;

	case PHOTOMETRIC_PALETTE:
	  if (!TIFFGetField (tif, TIFFTAG_COLORMAP, &redcolormap, &greencolormap, &bluecolormap))
	    {
	      printf ("%s: error getting colormaps\n", prog_name);
	      filter_quit ();
	    }
	  numcolors = maxval + 1;
	  maxval = 255;
	  grayscale = 0;

	  for (i = 0; i < numcolors; i++)
	    {
	      redcolormap[i] >>= 8;
	      greencolormap[i] >>= 8;
	      bluecolormap[i] >>= 8;
	    }
	  break;

	case PHOTOMETRIC_RGB:
	  grayscale = 0;
	  break;

	case PHOTOMETRIC_MASK:
	  printf ("%s: don't know how to handle PHOTOMETRIC_MASK\n", prog_name);
	  filter_quit ();

	default:
	  printf ("%s: unknown photometric: %d\n", prog_name, photomet);
	  filter_quit ();
	}
    }

  buf = (unsigned char *) malloc (TIFFScanlineSize (tif));
  if (!buf)
    {
      printf ("%s: can't allocate memory for scanline buffer\n", prog_name);
      filter_quit ();
    }

  image = new_image (filename, cols, rows, (grayscale) ? 1 : 3);
  display_image (image);
  dest = image_data (image);

#define NEXTSAMPLE                            \
  {                                           \
      if ( bitsleft == 0 )                    \
      {                                       \
	  ++inP;                              \
	  bitsleft = 8;                       \
      }                                       \
      bitsleft -= bps;                        \
      sample = ( *inP >> bitsleft ) & maxval; \
  }

  for (row = 0; row < rows; ++row)
    {
      if (TIFFReadScanline (tif, buf, row, 0) < 0)
	{
	  printf ("%s: bad data read on line %d\n", prog_name, row);
	  filter_quit ();
	}

      inP = buf;
      bitsleft = 8;

      switch (photomet)
	{
	case PHOTOMETRIC_MINISBLACK:
	  for (col = 0; col < cols; col++)
	    {
	      NEXTSAMPLE;
	      *dest++ = sample;
	    }
	  break;

	case PHOTOMETRIC_MINISWHITE:
	  for (col = 0; col < cols; col++)
	    {
	      NEXTSAMPLE;
	      *dest++ = maxval - sample;
	    }
	  break;

	case PHOTOMETRIC_PALETTE:
	  for (col = 0; col < cols; col++)
	    {
	      NEXTSAMPLE;
	      *dest++ = redcolormap[sample];
	      *dest++ = greencolormap[sample];
	      *dest++ = bluecolormap[sample];
	    }
	  break;

	case PHOTOMETRIC_RGB:
	  for (col = 0; col < cols; col++)
	    {
	      NEXTSAMPLE;
	      *dest++ = sample;
	      NEXTSAMPLE;
	      *dest++ = sample;
	      NEXTSAMPLE;
	      *dest++ = sample;
	      if (spp == 4)
		NEXTSAMPLE;
	    }
	  break;

	default:
	  printf ("%s: unknown photometric: %d\n", prog_name, photomet);
	  filter_quit ();
	}
    }

  update_image (image);
  free_image (image);
  filter_quit ();
}


/*
** pnmtotiff.c - converts a portable anymap to a Tagged Image File
**
** Derived by Jef Poskanzer from ras2tif.c, which is:
**
** Copyright (c) 1990 by Sun Microsystems, Inc.
**
** Author: Patrick J. Naughton
** naughton@wind.sun.com
**
** Permission to use, copy, modify, and distribute this software and its
** documentation for any purpose and without fee is hereby granted,
** provided that the above copyright notice appear in all copies and that
** both that copyright notice and this permission notice appear in
** supporting documentation.
**
** This file is provided AS IS with no warranties of any kind.  The author
** shall have no liability with respect to the infringement of copyrights,
** trade secrets or any patents by this file or any part thereof.  In no
** event will the author be liable for any lost revenue or profits or
** other special, indirect and consequential damages.
*/

static void
save_image (filename)
     char *filename;
{
#define DO_NONE 1
#define DO_LZW 2
#define DO_PACKBITS 4
#define DO_MSB2LSB 1
#define DO_LSB2MSB 2
#define DO_PALETTED 1
#define DO_GRAYSCALE 2
#define DO_RGB 3

  TIFF *tif;
  unsigned short red[256];
  unsigned short grn[256];
  unsigned short blu[256];
  int cols, rows, row, i;
  long g3options;
  long rowsperstrip;
  short photometric;
  short samplesperpixel;
  short bitspersample;
  int bytesperrow;
  unsigned char *buf;
  Image image;
  unsigned char *src;
  long compression;
  long fillorder;
  long predictor;
  long options;
  long colors;
  unsigned char *cmap;

  image = get_input_image (0);

  compression = DO_LZW;
  fillorder = DO_MSB2LSB;
  options = 0;

  if (image_channels (image) == 3)
    {
/*
      start_dialog ();
      start_radio_group (&compression, "Compression");
      add_check_button ("None");
      add_check_button ("LZW");
      add_check_button ("Pack Bits");
      end_radio_group ();
      start_radio_group (&fillorder, "Fill Order");
      add_check_button ("Msb to Lsb");
      add_check_button ("Lsb to Msb");
      end_radio_group ();
      start_check_group (&options, "Options");
      add_check_button ("Paletted");
      end_check_group ();
      end_dialog ();

      if (!show_dialog ())
	filter_quit ();

      if (options & DO_PALETTED)
	{
	  colors = 256;
	  
	  start_dialog ();
	  add_scale_button (&colors, "Number of Colors", 2, 256, 0);
	  end_dialog ();
	  
	  if (!show_dialog ())
	    filter_quit ();
	  
	  image = get_indexed_image (image, colors);
	  cmap = image_cmap (image);
	  colors = image_colors (image);
	}
      else
	{
	  switch (image_channels (image))
	    {
	    case 1:
	      options = DO_GRAYSCALE;
	      break;
	    case 3:
	      options = DO_RGB;
	      break;
	    }
	}
*/
    }

  src = image_data (image);
  cols = image_width (image);
  rows = image_height (image);

  switch (compression)
    {
    case DO_NONE:
      compression = COMPRESSION_NONE;
      break;
    case DO_LZW:
      compression = COMPRESSION_LZW;
      break;
    case DO_PACKBITS:
      compression = COMPRESSION_PACKBITS;
      break;
    default:
      compression = COMPRESSION_LZW;
      break;
    }

  switch (fillorder)
    {
    case DO_MSB2LSB:
      fillorder = FILLORDER_MSB2LSB;
      break;
    case DO_LSB2MSB:
      fillorder = FILLORDER_LSB2MSB;
      break;
    default:
      fillorder = FILLORDER_MSB2LSB;
      break;
    }

  g3options = 0;
  predictor = 0;
  rowsperstrip = 0;

  tif = TIFFOpen (filename, "w");
  if (!tif)
    {
      printf ("%s: can't open \"%s\"\n", prog_name, filename);
      filter_quit ();
    }

  switch (options)
    {
    case DO_PALETTED:
      samplesperpixel = 1;
      bitspersample = 8;
      photometric = PHOTOMETRIC_PALETTE;
      bytesperrow = cols;
      break;
    case DO_GRAYSCALE:
      samplesperpixel = 1;
      bitspersample = 8;
      photometric = PHOTOMETRIC_MINISBLACK;
      bytesperrow = cols;
      break;
    case DO_RGB:
      samplesperpixel = 3;
      bitspersample = 8;
      photometric = PHOTOMETRIC_RGB;
      bytesperrow = cols * 3;
      break;
    }

  if (rowsperstrip == 0)
    rowsperstrip = (8 * 1024) / bytesperrow;

  buf = (unsigned char *) malloc (bytesperrow);
  if (!buf)
    {
      printf ("%s: can't allocate memory for row buffer\n", prog_name);
      filter_quit ();
    }

  /* Set TIFF parameters. */
  TIFFSetField (tif, TIFFTAG_IMAGEWIDTH, cols);
  TIFFSetField (tif, TIFFTAG_IMAGELENGTH, rows);
  TIFFSetField (tif, TIFFTAG_BITSPERSAMPLE, bitspersample);
  TIFFSetField (tif, TIFFTAG_ORIENTATION, ORIENTATION_TOPLEFT);
  TIFFSetField (tif, TIFFTAG_COMPRESSION, compression);
  if (compression == COMPRESSION_LZW && predictor != 0)
    TIFFSetField (tif, TIFFTAG_PREDICTOR, predictor);
  TIFFSetField (tif, TIFFTAG_PHOTOMETRIC, photometric);
  TIFFSetField (tif, TIFFTAG_FILLORDER, fillorder);
  TIFFSetField (tif, TIFFTAG_DOCUMENTNAME, filename);
  TIFFSetField (tif, TIFFTAG_IMAGEDESCRIPTION, "the Gimp was here");
  TIFFSetField (tif, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel);
  TIFFSetField (tif, TIFFTAG_ROWSPERSTRIP, rowsperstrip);
  /* TIFFSetField( tif, TIFFTAG_STRIPBYTECOUNTS, rows / rowsperstrip ); */
  TIFFSetField (tif, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);

  if (options == DO_PALETTED)
    {
      for (i = 0; i < colors; i++)
	{
	  red[i] = *cmap++ << 8;
	  grn[i] = *cmap++ << 8;
	  blu[i] = *cmap++ << 8;
	}

      TIFFSetField (tif, TIFFTAG_COLORMAP, red, grn, blu);
    }

  /* Now write the TIFF data. */
  for (row = 0; row < rows; ++row)
    {
      if (TIFFWriteScanline (tif, src, row, 0) < 0)
	{
	  printf ("%s: failed a scanline write on row %d\n", prog_name, row);
	  filter_quit ();
	}

      src += bytesperrow;
    }

  TIFFFlushData (tif);
  TIFFClose (tif);

  free_image (image);
  filter_quit ();
}
